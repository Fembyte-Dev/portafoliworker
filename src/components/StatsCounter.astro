---
// Define las propiedades que puede recibir el componente
interface Stat {
  id: string;
  label: string;
  target: number;
  suffix?: string;
}

interface Props {
  stats: Stat[];
}

const { stats } = Astro.props;
---

<div class="stats-container">
  {stats.map((stat) => (
    <div class="stat-item">
      <div class="stat-number" id={stat.id}>0</div>
      <div class="stat-label">{stat.label}</div>
    </div>
  ))}
</div>

<style>
  .stats-container {
    display: flex;
    justify-content: space-around;
    flex-wrap: wrap;
    margin-top: 40px;
    width: 100%;
    opacity: 0;
    transform: translateY(30px);
    animation: fadeIn 1s forwards 0.8s;
  }

  .stat-item {
    width: 150px;
    height: 150px;
    background: var(--card-bg);
    border-radius: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin: 10px;
    padding: 20px;
    transition:
      transform 0.3s,
      box-shadow 0.3s;
    position: relative;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .stat-item::before {
    content: "";
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: linear-gradient(
      45deg,
      transparent,
      rgba(56, 189, 248, 0.1),
      transparent
    );
    transform: rotate(45deg);
    animation: shineEffect 3s linear infinite;
  }

  .stat-item:hover {
    transform: translateY(-10px);
    box-shadow: 0 10px 30px rgba(56, 189, 248, 0.2);
  }

  .stat-number {
    font-size: 2.5rem;
    font-weight: bold;
    margin-bottom: 10px;
    background: linear-gradient(
      90deg,
      var(--accent-neon-pink),
      var(--accent-neon-blue)
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .stat-label {
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  @keyframes shineEffect {
    0% {
      left: -100%;
    }
    100% {
      left: 100%;
    }
  }

  @keyframes countUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .stats-container {
      flex-direction: column;
      align-items: center;
      margin-top: 30px;
    }

    .stat-item {
      width: 100%;
      max-width: 250px;
      height: 120px;
    }
  }
</style>

<script>
  // Animación del contador 
  function animateCounter(element, target, duration = 2000, suffix = '') { 
    let start = 0; 
    const increment = Math.ceil(target / (duration / 16)); 
    const timer = setInterval(() => { 
      start += increment; 
      if (start > target) { 
        start = target; 
        clearInterval(timer); 
      } 
      element.textContent = start + suffix; 
    }, 16); 
  } 
  
  // Función para verificar si un elemento está visible en la ventana 
  function isElementInViewport(el) { 
    const rect = el.getBoundingClientRect(); 
    return ( 
      rect.top >= 0 && 
      rect.left >= 0 && 
      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && 
      rect.right <= (window.innerWidth || document.documentElement.clientWidth) 
    ); 
  } 
  
  // Iniciar animaciones cuando los elementos son visibles 
  function startCountersWhenVisible() {
    // Obtener todos los elementos stat-number
    const statElements = document.querySelectorAll('.stat-number');
    
    // Si hay al menos un elemento visible, iniciar las animaciones
    let visibleFound = false;
    
    statElements.forEach(element => {
      if (isElementInViewport(element) && !element.dataset.animated) {
        visibleFound = true;
        element.dataset.animated = 'true';
        
        // Obtener los valores de las propiedades desde los atributos de datos
        const target = parseInt(element.dataset.target || element.id.includes('projects') ? '48' : 
                               element.id.includes('videos') ? '136' : 
                               element.id.includes('followers') ? '25' : '0');
        const suffix = element.dataset.suffix || (element.id.includes('followers') ? 'K' : '');
        
        // Iniciar la animación
        animateCounter(element, target, 2000, suffix);
      }
    });
    
    // Si se encontró al menos un elemento visible, quitar el evento scroll
    if (visibleFound) {
      window.removeEventListener('scroll', startCountersWhenVisible);
    }
  }
  
  // Verificar al cargar la página
  document.addEventListener('DOMContentLoaded', () => {
    startCountersWhenVisible();
    // También verificar en scroll 
    window.addEventListener('scroll', startCountersWhenVisible);
  });
</script>